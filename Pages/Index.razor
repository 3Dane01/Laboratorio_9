@page "/"
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<PageTitle>Index</PageTitle>

<h1>Inscripciones</h1>
<h2>Manejo de Inscripciones</h2>

<div class="container text-center">
    <div class="row">
        <div class="col-6">
            <b>Alumnos</b>
        </div>
    </div>
    <div class="row">
        <div class="col-6">
            @if (alumnos == null)
            {
                <p><em>Cargando alumnos...</em></p>
            }
            else
            {
                <select class="form-select" aria-label="Default select example" @bind = "@dpiAlumno">
                    <option selected>Seleccione al alumno</option>
                    @foreach (var alumno in alumnos)
                    {
                        <option value="@alumno.Dpi">@alumno.Nombre</option>
                    }
                </select>
            }
        </div>
    </div>
    <div class="row">
        <div class="col-6">
            <b>Talleres</b>
        </div>
    </div>
    <div class="row">
        <div class="col-6">
            @if (talleres == null)
            {
                <p><em>Cargando talleres...</em></p>
            }
            else
            {
                <select class="form-select form-select-lg mb-3" aria-label="Large select example" @bind = "@codigoTaller">
                    <option selected>Seleccione el taller</option>
                    @foreach (var taller in talleres)
                    {
                        <option value="@taller.Codigo">@taller.Nombre</option>
                    }
                </select>
            }
        </div>
    </div>
</div>
<div>
    <button class="btn btn-primary" @onclick="GuardarInscripcion">Inscribir Alumno</button>
    <button class="btn btn-secondary" @onclick="CrearReporte">Ver resporte</button>
    <button class="btn btn-outline-secondary" @onclick="BorrarInscripciones">Borrar Inscripciones</button>
</div>

<div>
    @if (inscripciones == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Código</th>
                    <th>DPI</th>
                    <th>Fecha</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var inscripcion in inscripciones)
                {
                    <tr>
                        <td>@inscripcion.Codigo</td>
                        <td>@inscripcion.Dpi</td>
                        <td>@inscripcion.Fecha.ToShortDateString()</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>


<div>
    @if (reportes.Count > 0)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Alumno</th>
                    <th>Taller</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var reporte in reportes)
                {
                    <tr>
                        <td>@reporte.nombreAlumno</td>
                        <td>@reporte.nombreTaller</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    List<Alumno> alumnos = new List<Alumno>();
    List<Taller> talleres = new List<Taller>();
    List<Inscripcion> inscripciones = new List<Inscripcion>();
    List<Reporte> reportes = new List<Reporte>();

    string codigoTaller;
    string dpiAlumno;

    protected override async Task OnInitializedAsync()
    {
        .




try
        {
            alum.
            nos = await Http.GetFromJsonAsync<List<Alumno>>("sample-data/Alumno.json");

            talleres = await Http.GetFromJsonAsync<List<Taller>>("sample-data/archivotaller.json");

            inscripciones = await localStorage.GetItemAsync<List<Inscripcion>>("inscripciones");

        }
        catch (Exception ex)
        {
            Console.WriteLine("Error al cargar datos: " + ex.Message);
        }
    }
    protected async Task GuardarInscripcion()
    {
        //SI ES DIFERENTTE A NULL   
        if (!string.IsNullOrEmpty(codigoTaller) && !string.IsNullOrEmpty(dpiAlumno))
        {
            Inscripcion inscripcion = new Inscripcion();
            inscripcion.Codigo = codigoTaller;
            inscripcion.Dpi = dpiAlumno;
            inscripcion.Fecha = DateTime.Now;

            inscripciones.Add(inscripcion);
            //QUE ES LO QUE VA A GUARDAR EN EL LOCALSTORAGE
            await localStorage.SetItemAsync("inscripciones", inscripciones);
        }
    }
    protected async Task BorrarInscripciones()
    {
        await localStorage.RemoveItemAsync("inscripciones");
        inscripciones.Clear();
    }

    protected void CrearReporte()
    {
        //variable a creear, de donde se quiere ir a compiar
        foreach(var inscrip in inscripciones)
        {
            Alumno alumno = alumnos.Find(a => a.Dpi == inscrip.Dpi);
            Taller taller = talleres.Find(t => t.Codigo == inscrip.Codigo);

            Reporte reporte = new Reporte();
            reporte.nombreTaller = taller.Nombre;
            reporte.nombreAlumno = alumno.Nombre;

            reportes.Add(reporte);
        }
    }
    //hola probando probando jaja 
    //prueba no 2
    //hola hola 

}
